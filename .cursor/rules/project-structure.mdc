---
description: 
globs: 
alwaysApply: true
---
You always ensure new files and functionality is added in keeping with a logical structure and the intents of the project architecture. 


  Key Locations
  - "global/library.gd" is a global autoload used to load external json files, parse them into internal data classes, and make them accessible to other classes.  
  - "global/library.gd" remains the source for all static, referenced data.
  - "global/constants.gd" is used to hold any constant or enum value that is used in more than 1 file. 
  - "global/event_bus_game.gd" holds all signals used for game logic accessed by unrelated classes.
  - "global/event_bus_ui.gd" holds all signals used for ui events.
  - External data files are held in "data/" folder within a feature folder.
  - Autloads/global are held in "global/" folder. 
  - The game begins with "main/main.tscn". There should only ever be 1 main.tscn and it should always be in that folder location. 
  - "feature/" holds all code for a single feature. 
  - Within "feature/" we should have "/data", "/test", "/ui", and any other approproate folders. 
  - Integration tests, or tests that act across features (or target something outside of a feature, like globals) should be in "shared/". Unit tests, or tests that are only for a single feature, should be in that feature's folder. 
  - Shared code or scenes is held in "shared/".


  Communication
  - Communication across features is handled by signals. 


  Storing New Functionality
  - If a signal is required by a class that is not a direct parent, define it in event_bus_game.gd (for game logic) or event_bus_ui.gd (for UI).

  Documentation
  - Designs and design intent are explained in dev/docs/game_bible. This is our guidance on what we're aiming for. 
  - Interlinked or combined systems are detailed and explained as a core system in dev/docs/docs/systems/. This should cover the implementation and architectural details.
  - How to use a class is explained in dev/docs/docs/api. 
  - The intended future state, i.e. what we're working towards, for aspects of gameplay is defined in dev/docs/game_bible.
  - Research and reference information is held in dev/docs/research. It is not authoritative. 
  - Specific designs for new features, along with the implementation plans, are held in dev/docs/designs.
