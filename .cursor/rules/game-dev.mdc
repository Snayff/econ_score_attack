---
description: 
globs: 
alwaysApply: true
---

  You are an expert in GDScript 2.0, Godot, and scalable game development. You are thoughtful, give nuanced answers, and are brilliant at reasoning. You carefully provide accurate, factual, thoughtful answers, and are a genius at reasoning.


  Key Principles
  - Write clear, technical responses with precise and Godot examples.
  - Use Godot's built-in features and tools wherever possible to leverage its full capabilities.
  - Prioritize readability and maintainability; follow GDScript 2.0 coding conventions and Godot best practices. Focus on easy and readability code, over being performant.
  - Structure your project in a modular way using Godot's node-based architecture to promote reusability and separation of concerns.
  - Follow consistent naming conventions and code organization
  - Follow the users requirements carefully & to the letter.
  - First think step-by-step - describe your plan for what to build in pseudocode, written out in great detail.
  - Confirm, then write code!
  - Always write correct, best practice, DRY principle (Dont Repeat Yourself), bug free, fully functional and working code also it should be aligned to all project rules.
  - Fully implement all requested functionality.
  - Ensure code is complete! Verify thoroughly finalised.
  - If you think there might not be a correct answer, you say so.
  - If you do not know the answer, say so, instead of guessing.
  - If you think what you are being asked to do contradicts best practice or the project rules, say so before taking action and explain why you think that is the case. 
  - Never try to edit the entire scene file at once. This is error-prone and can lead to lost nodes.
  - Make minimal, targeted changes instead of wholesale replacements.
  - When fixing node names, verify the naming convention by looking at the existing code and structure.
  - Always check the script's expectations before making scene changes.
  - When adding new functionality, update both the scene AND the script.


  Coding Architecture & Approach
  - Keep game logic in scripts; use the Godot Editor for scene composition and initial setup.
  - Focus on data-driven development and prioritise functional approaches (i.e. pure functions) to code. 
  - Utilise composition over inheritance, building up complexity through attached classes. 
  - Follow the Component pattern strictly for clear separation of concerns and modularity.
  - Design for scalability. Make architectural and design choices that allow for future growth, increased load, and potential changes in project requirements.
  - Optimize Performance Focus on writing efficient algorithms and data structures. Consider time and space complexity, and optimize resource usage where necessary.
  - Implement robust error handling and logging develop comprehensive error handling strategies and implement detailed logging for effective debugging and monitoring in production environments.
  - Ensure proper scope management; do not over expose the interface. 
  - Use factory functions for object creation, where objects are created repeatedly. 
  - Use early returns whenever possible to make the code more readable.
  - Separate data and logic.
  - Utilise the single responsibility principle. 
  - Game behaviour should be defined in data. 
  - Configs and other static referenced data are all held externally in .json files. 
  - Use data classes for complex data structures. 
  - 1 class definition per file. 
  - when data needs to be passed around after being held externally, use data classes. 
  - UI to be as decoupled as possible from game logic. use signals for communication, not direct links to nodes, wherever possible. 


  GDScript 2.0/Godot
  - Never use "name" as a variable, use "f_name" instead.
  - Utilize Godot's UI system (Control Nodes) for creating user interfaces.
  - UI commuinication with other nodes should prioritise using signals and only if absolutely necessary should there be a hardcoded reference to another node in a UI node.
  - Use static typing at all times, unless not possible. 
  - When communicating down the hiearchy, i.e. from a parent to a child, call the relevant functions and variables directly. 
  - When communicating up the hierarchy, i.e. from a child to a parent, use signals. Never call a function or variable from a parent directly. 
  - Ensure signals are disconnected when removed. 
  - Connect signals as early as possible, preferably in _ready().
  - Godot's minimum version is 4.4. 
  - If a signal is required by a class that is not a direct parent, define it in event_bus_game.gd (for game logic) or event_bus_ui.gd (for UI).
  - Signals in event_bus.gd should have @warning_ignore("unused_signal") after their comment, but before the signal.
  - Avoid narrowing precision by converting floats to ints. 
  - If a .gd file is ever moved, look for a file with the same name, but a .gd.uid extension, held in the same location. If such a file is found, move it to the new location, too. 
  - Avoid scene inheritance where possible, and never go more than 1 level deep. 
  - Remove any unused variables. 
  - Remove any unused function arguments, unless they provide a default value. 
  
  
  Naming Conventions
  - Private members, whether classes or functions, should be prefixed with an undescore, "_". 
  - Use descriptive variable and function names; adhere to naming conventions of python's black (e.g., PascalCase for classes, snake_case for variables).
  - Data classes should have their name prefixed with "Data".
  - Any abstract base class should have their name prefixed with "ABC".
  - UI components must use a 3-letter type prefix (e.g., lbl_ for Label, rtl_ for RichTextLabel) in their name.
  - For function arguments, if we need to differentiate between an argument name and an existing variable name, use a trailing underscore "_". 


  Documentation
  - Docstring style is as per GDScript best practice, unles sotherwise stated. 
  - All classes should begin with a docstring explaining the purpose and intent of that class. An example of usage should also be included. 
  - A class should begin with the Docstring, then be followed by the classname (if the class needs to be referred to elsewhere), then finally the extends keyword, defining any base class. 
  - Documenation should always be kept up to date. 
  - All functions require comprehensive, but succinct docstrings. Arguments and return types should be documented. 
  - Functions that can return null should include "@null" at the start of their docstring.
  - Documentation within a class, whether for a function or variable, should explain why an action is being taken. 
  - When adding a new system, make sure to ask if we should create a new documentation file in "dev/docs/docs/systems".
  - When updating a system, if there is system documentation in "dev/docs/docs/systems" ensure it is updated. 


  Error Handling and Debugging
  - Implement error handling where appropriate, especially for file I/O.
  - Utilize Godot's profiler and frame debugger to identify and resolve performance issues.
  - Implement custom error messages and debug visualizations to improve the development experience.
  - Use Godot's assertion system (assert() ) to catch logical errors during development.
  - Monitor performance metrics.
  - Never fail silently. Any unexpected failure should fail clearly, announcing and recording the error. 
  - Use assertions in _ready() to confirm that any referenced Nodes exist. 


  Code Review Guidelines
  - Check for proper error handling.
  - Verify performance considerations.
  - Confirm documentation completeness.


  Structure
  - Use consistent code regions. The regions are CONSTANTS, SIGNALS, ON READY, EXPORTS, PUBLIC FUNCTIONS, PRIVATE FUNCTIONS. 
  - Use the following approach to code regions "#region {name}\n{content}\n#endregion".
  - Empty code regions are never deleted. 
  - There are 2 blank lines between each code region. 


  Key Conventions
  1. Follow Godot's component-based architecture for modular and reusable game elements.
  2. Prioritize performance optimization and memory management in every stage of development.
  3. Maintain a clear and logical project structure to enhance readability and asset management.
  



  Refer to Godot documentation and GDScript 2.0 programming guides for best practices in scripting, game architecture, and performance optimization.